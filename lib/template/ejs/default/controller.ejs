const <%= tableHumpName %>Service = require('../service/<%= tableHumpName %>Service');
<%
    function getCheckParamsDataType(dataType, length) {
        const dataTypeMap = {
            'CHAR': 'string',
            'VARCHAR': 'string',
            'TEXT': 'string',
            'TINYINT': 'number',
            'INT': 'number',
            'BIGINT': 'number',
        };

        if(dataType === 'TINYINT' && length === 1) {
            return 'Boolean';
        } else {
            return dataTypeMap[dataType] || dataType.toLowerCase();
        }
    }
%>
/**
 * <%= tableComment %>
 */
class CodeController {
    /**
     * 创建
     */
    async create(ctx) {
        const params = ctx.request.body;

        <%_
            columns.forEach(function(column) {
                if(!column.primaryKey && !column.isNullable) {
        -%>
        if (!params.<%= column.columnHumpName %>) {
            ctx.throw('<%= column.columnComment %>不能为空', 400);
        }
        <%_ }}); -%>

        const info = await <%= tableHumpName %>Service.create(params);
        return info;
    }

    /**
     * 列表
     */
    async query(ctx) {
        const params = ctx.query;

        const result = await <%= tableHumpName %>Service.query(params);
        return result;
    }

    /**
     * 详情
     */
    async find(ctx) {
        const { id } = ctx.params;

        const result = await <%= tableHumpName %>Service.find(id);
        return result;
    }

    /**
     * 修改
     */
    async update(ctx) {
        const { params, query } = ctx;
        const { id } = params;

        await <%= tableHumpName %>Service.update(id, query);
    }

    /**
     * 删除
     */
    async delete(ctx) {
        const { id } = ctx.params;

        await <%= tableHumpName %>Service.delete(id);
    }
}

module.exports = CodeController;
