package <%= javaPackage %>.mapper;

import com.mybatisflex.core.query.QueryWrapper;
import com.pighand.framework.spring.base.BaseMapper;
import <%= javaPackage %>.domain.<%= tableFileName %>Domain;
import <%= javaPackage %>.vo.<%= tableFileName %>VO;
import org.apache.ibatis.annotations.Mapper;
import com.pighand.framework.spring.page.PageOrList;

import java.util.List;
import java.util.function.Consumer;

import <%= javaPackage %>.table.<%= tableFileName %>TableDef.<%= tableName.toUpperCase() %>;

<%_
(tableRelationMap[tableName] || []).forEach((relation) => {
-%>
import static <%= javaPackage %>.domain.table.<%= relation.tableFileName %>TableDef.<%= relation.table.toUpperCase() %>;
<%_});-%>

/**
 * <%= tableComment %>
 *
 * @author <%= author %>
 * @createDate <%= dateTime %>
 */
@Mapper
public interface <%= tableFileName %>Mapper extends BaseMapper<<%= tableFileName %>Domain> {

    /**
     * 基础查询条件
     *
     * @return
     */
    default QueryWrapper relationOne(List<String> joinTables, QueryWrapper queryWrapper) {
        if (queryWrapper == null) {
            queryWrapper = QueryWrapper.create();
        }

        if (joinTables == null) {
            return queryWrapper;
        }

        <%_
        (tableRelationMap[tableName] || [])
            .filter((item) => item.relation === '11' || item.relation === 'n1')
            .forEach((relation) => {
        -%>
        if (joinTables.contains(<%= relation.table.toUpperCase() %>.getTableName())) {
            queryWrapper.leftJoin(<%= relation.table.toUpperCase() %>)
                .on(<%= relation.table.toUpperCase() %>.<%= relation.relationKey.toUpperCase() %>.eq(<%= tableName.toUpperCase() %>.<%= relation.mainKey.toUpperCase() %>));
        }

        <%_});-%>
        return queryWrapper;
    }

    /**
     * 一对多关联查询结果
     *
     * @return
     */
     default Consumer<FieldQueryBuilder<<%= tableFileName %>VO>>[] relationMany(List<String> joinTables) {
        if (joinTables == null) {
            return null;
        }

        <%_
            const tmpTableRelations = (tableRelationMap[tableName] || [])
                .filter((item) => item.relation === 'nn' || item.relation === '1n')
        -%>

        <%_ tmpTableRelations.forEach((relation) => { -%>
        boolean has<%= relation.tableFileName %> = joinTables.contains(<%= relation.table.toUpperCase() %>.getTableName());
        <%_});-%>


        int length = 0;

        <%_ tmpTableRelations.forEach((relation) => { -%>
        if (has<%= relation.tableFileName %>) {
            length++;
        }
        <%_});-%>

        Consumer<FieldQueryBuilder<<%= tableFileName %>VO>>[] fieldQueryBuilders = new Consumer[length];

        int nowIndex = 0;
        <%_ tmpTableRelations.forEach((relation) => { -%>
        if (hasGoodsSku) {
            Consumer<FieldQueryBuilder<<%= tableFileName %>VO>> consumer = (builder) -> {
                builder.field(<%= tableFileName %>VO::get<%= relation.tableFileName %>).queryWrapper(<%= tableHumpName %> -> QueryWrapper.create().from(<%= relation.table.toUpperCase() %>)
                    .where(<%= relation.table.toUpperCase() %>.<%= relation.relationKey.toUpperCase() %>.eq(<%= tableHumpName %>.get<%= relation.mainKeyFileName %>())));
            };
            fieldQueryBuilders[nowIndex] = consumer;
            nowIndex++;
        }
        <%_});-%>

        return fieldQueryBuilders;
    }

    /**
     * 查询详情
     *
     * @param id         主键
     * @param joinTables 关联表
     * @return
     */
    default <%= tableFileName %>VO find(Long id, List<String> joinTables) {
        QueryWrapper queryWrapper = this.relationOne(joinTables, null).where(<%= tableName.toUpperCase() %>.ID.eq(id));
        Consumer<FieldQueryBuilder<<%= tableFileName %>VO>>[] relationManyBuilders = this.relationMany(joinTables);

        return this.selectOneByQueryAs(queryWrapper, <%= tableFileName %>VO.class, relationManyBuilders);
    }

    /**
     * 查询详情
     *
     * @param queryWrapper
     * @param joinTables 关联表
     * @return
     */
    default <%= tableFileName %>VO find(QueryWrapper queryWrapper, List<String> joinTables) {
        QueryWrapper finalQueryWrapper = this.relationOne(joinTables, queryWrapper);
        Consumer<FieldQueryBuilder<<%= tableFileName %>VO>>[] relationManyBuilders = this.relationMany(joinTables);

        return this.selectOneByQueryAs(finalQueryWrapper, <%= tableFileName %>VO.class, relationManyBuilders);
    }

    /**
     * 分页或列表
     *
     * @param <%= tableHumpName %>Domain
     * @return
     */
    default PageOrList<<%= tableFileName %>VO> query(<%= tableFileName %>Domain <%= tableHumpName %>Domain, QueryWrapper queryWrapper) {
        QueryWrapper finalQueryWrapper = this.relationOne(<%= tableHumpName %>Domain.getJoinTables(), queryWrapper);
        Consumer<FieldQueryBuilder<<%= tableFileName %>VO>>[] relationManyBuilders =
            this.relationMany(<%= tableHumpName %>Domain.getJoinTables());

        return this.page(<%= tableHumpName %>Domain, finalQueryWrapper, <%= tableFileName %>VO.class, relationManyBuilders);
    }
}
