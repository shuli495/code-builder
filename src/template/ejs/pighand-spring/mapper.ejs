package <%= javaPackage %>.mapper;

import com.mybatisflex.core.query.QueryWrapper;
import com.pighand.framework.spring.base.BaseMapper;
import <%= javaPackage %>.domain.<%= tableFileName %>Domain;
import <%= javaPackage %>.vo.<%= tableFileName %>VO;
import com.pighand.framework.spring.util.BeanUtil;
import org.apache.ibatis.annotations.Mapper;
import com.pighand.framework.spring.page.PageOrList;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import <%= javaPackage %>.table.<%= tableFileName %>TableDef.<%= tableName.toUpperCase() %>;

<%_
(tableRelationMap[tableName] || []).forEach((relation) => {
-%>
import static <%= javaPackage %>.domain.table.<%= relation.tableFileName %>TableDef.<%= relation.table.toUpperCase() %>;
<%_});-%>

/**
 * <%= tableComment %>
 *
 * @author <%= author %>
 * @createDate <%= dateTime %>
 */
@Mapper
public interface <%= tableFileName %>Mapper extends BaseMapper<<%= tableFileName %>Domain> {

    /**
     * 基础查询条件
     *
     * @return
     */
    default QueryWrapper relationOne(Set<String> joinTables, QueryWrapper queryWrapper) {
        if (queryWrapper == null) {
            queryWrapper = QueryWrapper.create();
        }

        if (joinTables == null || joinTables.isEmpty()) {
            return queryWrapper;
        }

        <%_
        (tableRelationMap[tableName] || [])
            .filter((item) => item.relation === '11' || item.relation === 'n1')
            .forEach((relation) => {
        -%>
        // <%= relation.table.toUpperCase() %>
        if (joinTables.contains(<%= relation.table.toUpperCase() %>.getTableName())) {
            queryWrapper.leftJoin(<%= relation.table.toUpperCase() %>)
                .on(<%= relation.table.toUpperCase() %>.<%= relation.relationKey.toUpperCase() %>.eq(<%= tableName.toUpperCase() %>.<%= relation.mainKey.toUpperCase() %>));

            joinTables.remove(<%= relation.table.toUpperCase() %>.getTableName());
        }

        <%_});-%>
        return queryWrapper;
    }

    /**
     * 一对多关联查询结果
     *
     * @return
     */
    default void relationMany(Set<String> joinTables, Object result) {
        if (joinTables == null || joinTables.isEmpty()) {
            return;
        }

        boolean isList = result instanceof List;

        List<Function<<%= tableFileName %>VO, Long>> mainIdGetters = new ArrayList<>(joinTables.size());
        List<Function<Object, Long>> subTableIdGetter = new ArrayList<>(joinTables.size());
        List<BiConsumer<<%= tableFileName %>VO, List>> subResultSetter = new ArrayList<>(joinTables.size());

        List<Function<Set<Long>, List>> subTableQueriesList = null;
        List<Function<Long, List>> subTableQueriesSingle = null;
        if (isList) {
            subTableQueriesList = new ArrayList<>(joinTables.size());
        } else {
            subTableQueriesSingle = new ArrayList<>(joinTables.size());
        }

        <%_
            const tmpTableRelations = (tableRelationMap[tableName] || [])
                .filter((item) => item.relation === 'nn' || item.relation === '1n')
        -%>
        <%_ tmpTableRelations.forEach((relation) => { -%>
        // <%= relation.table.toUpperCase() %>
        if (joinTables.contains(<%= relation.table.toUpperCase() %>.getTableName())) {
            mainIdGetters.add(<%= tableFileName %>VO::get<%= relation.mainKeyFileName %>);

            if (subTableQueriesList != null) {
                subTableQueriesList.add(
                    ids -> new <%= relation.tableFileName %>Domain().select(<%= relation.table.toUpperCase() %>.DEFAULT_COLUMNS).where(<%= relation.table.toUpperCase() %>.<%= relation.relationKey.toUpperCase() %>.in(ids))
                        .listAs(<%= relation.tableFileName %>VO.class));
            } else {
                subTableQueriesSingle.add(
                    id -> new <%= relation.tableFileName %>Domain().select(<%= relation.table.toUpperCase() %>.DEFAULT_COLUMNS).where(<%= relation.table.toUpperCase() %>.<%= relation.relationKey.toUpperCase() %>.eq(id))
                        .listAs(<%= relation.tableFileName %>VO.class));
            }

            subTableIdGetter.add(obj -> ((<%= relation.tableFileName %>VO)obj).get<%= relation.relationKeyFileName %>());
            subResultSetter.add((vo, list) -> vo.set<%= relation.tableFileName %>((List<<%= relation.tableFileName %>VO>)list));
        }

        <%_});-%>

        if (result instanceof List) {
            BeanUtil.queryWithRelatedData((List)result, mainIdGetters, subTableQueriesList, subTableIdGetter,
                subResultSetter);
        } else {
            BeanUtil.queryWithRelatedData((<%= tableFileName %>VO)result, mainIdGetters, subTableQueriesSingle, subResultSetter);
        }
    }

    /**
     * 查询详情
     *
     * @param id         主键
     * @param joinTables 关联表
     * @return
     */
    default <%= tableFileName %>VO find(Long id, String... joinTables) {
        Set<String> joinTableSet = Stream.of(joinTables).collect(Collectors.toSet());

        QueryWrapper queryWrapper = this.relationOne(joinTableSet, null).where(<%= tableName.toUpperCase() %>.ID.eq(id));

        <%= tableFileName %>VO result = this.selectOneByQueryAs(queryWrapper, <%= tableFileName %>VO.class);
        this.relationMany(joinTableSet, result);

        return result;
    }

    /**
     * 查询详情
     *
     * @param queryWrapper
     * @param joinTables 关联表
     * @return
     */
    default <%= tableFileName %>VO find(QueryWrapper queryWrapper, String... joinTables) {
        Set<String> joinTableSet = Stream.of(joinTables).collect(Collectors.toSet());

        QueryWrapper finalQueryWrapper = this.relationOne(joinTableSet, queryWrapper);

        <%= tableFileName %>VO result =  this.selectOneByQueryAs(finalQueryWrapper, <%= tableFileName %>VO.class);
        this.relationMany(joinTableSet, result);

        return result;
    }

    /**
     * 分页或列表
     *
     * @param <%= tableHumpName %>Domain
     * @return
     */
    default PageOrList<<%= tableFileName %>VO> query(<%= tableFileName %>Domain <%= tableHumpName %>Domain, QueryWrapper queryWrapper) {
        QueryWrapper finalQueryWrapper = this.relationOne(<%= tableHumpName %>Domain.getJoinTables(), queryWrapper);

        PageOrList<<%= tableFileName %>VO> result = this.page(<%= tableHumpName %>Domain, finalQueryWrapper, <%= tableFileName %>VO.class);
        this.relationMany(<%= tableHumpName %>Domain.getJoinTables(), result.getRecords());

        return result;
    }
}
