package <%= javaPackage %>.service.impl;

import com.mybatisflex.core.query.QueryWrapper;
import <%= javaPackage %>.domain.<%= tableFileName %>Domain;
import <%= javaPackage %>.mapper.<%= tableFileName %>Mapper;
import <%= javaPackage %>.service.<%= tableFileName %>Service;
import <%= javaPackage %>.vo.<%= tableFileName %>VO;
import com.pighand.framework.spring.base.BaseServiceImpl;
import com.pighand.framework.spring.page.PageOrList;
import com.pighand.framework.spring.util.VerifyUtils;
import com.pighand.framework.spring.page.PageType;
import org.springframework.stereotype.Service;

<%_
(tableRelationMap[tableName] || []).forEach((relation) => {
-%>
import com.pighand.user.domain.table.<%= relation.tableFileName %>TableDef;
<%_});-%>
import java.util.List;

/**
 * <%= tableComment %>
 *
 * @author <%= author %>
 * @createDate <%= dateTime %>
 */
@Service
public class <%= tableFileName %>ServiceImpl extends BaseServiceImpl<<%= tableFileName %>Mapper, <%= tableFileName %>Domain>
     implements <%= tableFileName %>Service{

    /**
     * 创建
     *
     * @param <%= tableHumpName %>VO
     * @return
     */
    @Override
    public <%= tableFileName %>VO create(<%= tableFileName %>VO <%= tableHumpName %>VO) {
        super.mapper.insert(<%= tableHumpName %>VO);

        return <%= tableHumpName %>VO;
    }

    /**
     * 详情
     *
     * @param id
     * @return
     */
    @Override
    public <%= tableFileName %>Domain find(Long id) {
        <%_ if((tableRelationMap[tableName] || []).length > 0) { -%>
        List<String> joinTables = List.of(<%- (tableRelationMap[tableName] || []).map(item => item.table.toUpperCase() + ".getTableName()").join(', ') %>);

        return super.mapper.find(id, joinTables);
        <%_} else {-%>
        return super.mapper.find(id, null);
        <%_}-%>
    }

    /**
     * 分页或列表
     *
     * @param <%= tableHumpName %>VO
     * @return PageOrList<<%= tableFileName %>VO>
     */
    @Override
    public PageOrList<<%= tableFileName %>VO> query(<%= tableFileName %>VO <%= tableHumpName %>VO) {
        <%_ if((tableRelationMap[tableName] || []).length > 0) { -%>
        <%= tableHumpName %>VO.setJoinTables(<%- (tableRelationMap[tableName] || []).map(item => item.table.toUpperCase() + ".getTableName()").join(', ') %>);
        <%_}-%>

        QueryWrapper queryWrapper = new QueryWrapper();
        <%_
            const tmpColumns = columns.filter((column) => !column.primaryKey
                && column.javaDataType !== 'Date' && column.dataType !== 'JSON'
                && !['deleted', 'createdAt', 'updatedAt'].includes(column.columnHumpName));

            const StringColumns = tmpColumns.filter((column) => column.javaDataType === 'String');
            const OtherColumns = tmpColumns.filter((column) => column.javaDataType !== 'String');
        -%>

        <%_ if(StringColumns.length > 0) { -%>
        // like
        <%_}-%>
        <%_
            StringColumns
                .forEach((column) => {
        -%>
        queryWrapper.and(<%= tableName.toUpperCase() %>.<%= column.columnName.toUpperCase() %>.like(<%= tableHumpName %>VO.get<%= column.columnFileName %>(), VerifyUtils::isNotEmpty));
        <%_ }); -%>

        <%_ if(OtherColumns.length > 0) { -%>
        // equal
        <%_}-%>
        <%_
            OtherColumns
                .forEach((column) => {
        -%>
        queryWrapper.and(<%= tableName.toUpperCase() %>.<%= column.columnName.toUpperCase() %>.eq(<%= tableHumpName %>VO.get<%= column.columnFileName %>(), VerifyUtils::isNotEmpty));
        <%_ }); -%>

        return super.mapper.query(<%= tableHumpName %>VO, queryWrapper);
    }

    /**
     * 修改
     *
     * @param <%= tableHumpName %>VO
     */
    @Override
    public void update(<%= tableFileName %>VO <%= tableHumpName %>VO) {
        UpdateChain updateChain = this.updateChain().where(<%= table.toUpperCase() %>.ID.eq(<%= tableHumpName %>VO.getId()));
        boolean needUpdate = false;

        <%_
            const tmpColumns = columns.filter((column) => column.primaryKey
                || ['password', 'deleted', 'creatorId', 'createdAt', 'updatedAt'].includes(column.columnHumpName));
        -%>
        <%_ tmpColumns.forEach((column) => { -%>
            if (VerifyUtils.isNotEmpty(<%= tableHumpName %>VO.get<%= column.columnFileName %>())) {
                needUpdate = true;
                updateChain.set(<%= table.toUpperCase() %>.<%= column.columnName.toUpperCase() %>, <%= tableHumpName %>VO.get<%= column.columnFileName %>());
            }
        <%_ }); -%>

        if (needUpdate) {
            updateChain.update();
        }
    }

    /**
     * 删除
     *
     * @param id
     */
    @Override
    public void delete(Long id) {
        super.mapper.deleteById(id);
    }
}
